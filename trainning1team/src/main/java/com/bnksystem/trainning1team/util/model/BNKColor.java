package com.bnksystem.trainning1team.util.model;import org.apache.poi.hssf.util.HSSFColor;import org.apache.poi.xssf.usermodel.XSSFColor;import java.awt.*;public enum BNKColor {    XSSF_BACKGROUND_COLOR_LIGHTGRAY(new XSSFColor(new Color(226, 225, 225), null)),    XSSF_BACKGROUND_COLOR_WHITE(new XSSFColor(new Color(255, 255, 255), null)),    XSSF_BACKGROUND_COLOR_WORKING(new XSSFColor(new Color(255, 103, 103), null)),    XSSF_BACKGROUND_COLOR_MEETING(new XSSFColor(new Color(0, 181, 173), null)),    XSSF_BACKGROUND_COLOR_TRIP(new XSSFColor(new Color(33, 133, 208), null)),    XSSF_BACKGROUND_COLOR_ABSENCE(new XSSFColor(new Color(249, 250, 251), null)),    XSSF_BACKGROUND_COLOR_HIGHLIGHT(new XSSFColor(new Color(255, 255, 0), null)),    XSSF_BACKGROUND_COLOR_STS005(new XSSFColor(new Color(241, 113, 28), null)),    XSSF_BACKGROUND_COLOR_STS006(new XSSFColor(new Color(232, 131, 170), null)),    XSSF_BACKGROUND_COLOR_STS007(new XSSFColor(new Color(118, 90, 237), null)),    TEXT_COLOR_BLACK(HSSFColor.HSSFColorPredefined.BLACK.getColor()),    TEXT_COLOR_WORKING(HSSFColor.HSSFColorPredefined.WHITE.getColor()),    TEXT_COLOR_MEETING(HSSFColor.HSSFColorPredefined.WHITE.getColor()),    TEXT_COLOR_TRIP(HSSFColor.HSSFColorPredefined.WHITE.getColor()),    TEXT_COLOR_ABSENCE(HSSFColor.HSSFColorPredefined.BLACK.getColor()),    TEXT_COLOR_STS005(HSSFColor.HSSFColorPredefined.WHITE.getColor()),    TEXT_COLOR_STS006(HSSFColor.HSSFColorPredefined.WHITE.getColor()),    TEXT_COLOR_STS007(HSSFColor.HSSFColorPredefined.WHITE.getColor()),    TEXT_COLOR_AM(HSSFColor.HSSFColorPredefined.RED.getColor()),    TEXT_COLOR_PM(HSSFColor.HSSFColorPredefined.BLACK.getColor()),    TEXT_COLOR_RED(HSSFColor.HSSFColorPredefined.RED.getColor()),    TEXT_COLOR_BLUE(HSSFColor.HSSFColorPredefined.BLUE.getColor());    XSSFColor xssfColor;    HSSFColor hssfColor;    BNKColor(XSSFColor xssfColor) {        this.xssfColor = xssfColor;    }    BNKColor(HSSFColor hssfColor) {        this.hssfColor = hssfColor;    }    public XSSFColor getColor() {        return this.xssfColor;    }    public HSSFColor getTextColor() {        return this.hssfColor;    }    public static XSSFColor getStatusBackgroundColor(String statusCd) {        switch(statusCd) {            case "STS001":                return BNKColor.XSSF_BACKGROUND_COLOR_WORKING.getColor();            case "STS002":                return BNKColor.XSSF_BACKGROUND_COLOR_MEETING.getColor();            case "STS003":                return BNKColor.XSSF_BACKGROUND_COLOR_TRIP.getColor();            case "STS004":                return BNKColor.XSSF_BACKGROUND_COLOR_ABSENCE.getColor();            case "STS005":                return BNKColor.XSSF_BACKGROUND_COLOR_STS005.getColor();            case "STS006":                return BNKColor.XSSF_BACKGROUND_COLOR_STS006.getColor();            case "STS007":                return BNKColor.XSSF_BACKGROUND_COLOR_STS007.getColor();            default:                return BNKColor.XSSF_BACKGROUND_COLOR_WHITE.getColor();        }    }    public static HSSFColor getStatusTextColor(String statusCd) {        switch(statusCd) {            case "STS001":                return BNKColor.TEXT_COLOR_WORKING.getTextColor();            case "STS002":                return BNKColor.TEXT_COLOR_MEETING.getTextColor();            case "STS003":                return BNKColor.TEXT_COLOR_TRIP.getTextColor();            case "STS004":                return BNKColor.TEXT_COLOR_ABSENCE.getTextColor();            case "STS005":                return BNKColor.TEXT_COLOR_STS005.getTextColor();            case "STS006":                return BNKColor.TEXT_COLOR_STS006.getTextColor();            case "STS007":                return BNKColor.TEXT_COLOR_STS007.getTextColor();            default:                return BNKColor.TEXT_COLOR_BLACK.getTextColor();        }    }}